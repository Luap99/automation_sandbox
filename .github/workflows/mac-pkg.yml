name: Sign and Upload Mac Installer

on:
  release:
    types: [created, published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version to build and upload (e.g. "v4.2.1")'
        required: true
      dryrun:
        description: 'Perform all the steps except uploading to the release page'
        required: true
        default: "true"  # 'choice' type requires string value
        type: choice
        options:
          - "true"  # Must be quoted string, boolean value not supported.
          - "false"

permissions:
  contents: write

jobs:
  build:
    runs-on: macos-latest
    env:
      APPLICATION_CERTIFICATE: "foobar1"
      CODESIGN_IDENTITY: "foobar2"
      INSTALLER_CERTIFICATE: "foobar3"
      PRODUCTSIGN_IDENTITY: "foobar4"
      CERTIFICATE_PWD: "foobar5"

      NOTARIZE_TEAM: "foobar6"
      NOTARIZE_USERNAME: "foobar7"
      NOTARIZE_PASSWORD: "foobar8"

      KEYCHAIN_PWD: "foobar9"
    steps:
    - name: Consolidate dryrun setting to always be true or false
      id: actual_dryrun
      run: |
        # The 'release' trigger will not have a 'dryrun' input set. Handle
        # this case in a readable/maintainable way.
        if [[ -z "${{ inputs.dryrun }}" ]]
        then
          echo "dryrun=false" >> $GITHUB_OUTPUT
        else
          echo "dryrun=${{ inputs.dryrun }}" >> $GITHUB_OUTPUT
        fi
    - name: Dry Run Status
      run: |
        echo "::notice::This workflow execution will be a dry-run: ${{ steps.actual_dryrun.outputs.dryrun }}"
    - name: Determine Version
      id: getversion
      run: |
        if [[ -z "${{ inputs.version }}" ]]
        then
              VERSION=${{ github.event.release.tag_name }}
        else
              VERSION=${{ inputs.version }}
        fi
        echo
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    - name: Check uploads
      id: check
      run: |
        URI="https://github.com/containers/automation_sandbox/releases/download/${{steps.getversion.outputs.version}}"
        ARM_FILE="podman-installer-macos-arm64.pkg"
        AMD_FILE="podman-installer-macos-amd64.pkg"

        status=$(curl -s -o /dev/null -w "%{http_code}" "${URI}/${ARM_FILE}")
        if [[ "$status" == "404" ]] ; then
          echo "buildarm=true" >> $GITHUB_OUTPUT
        else
          echo "::warning::ARM installer already exists, skipping"
          echo "buildarm=false" >> $GITHUB_OUTPUT
        fi

        status=$(curl -s -o /dev/null -w "%{http_code}" "${URI}/${AMD_FILE}")
        if [[ "$status" == "404" ]] ; then
          echo "buildamd=true" >> $GITHUB_OUTPUT
        else
          echo "::warning::AMD installer already exists, skipping"
          echo "buildamd=false" >> $GITHUB_OUTPUT
        fi
    - name: Checkout Version
      if: >-
        steps.check.outputs.buildamd == 'true' ||
        steps.check.outputs.buildarm == 'true' ||
        steps.actual_dryrun.outputs.dryrun == 'true'
      uses: actions/checkout@v3
      with:
        ref: ${{steps.getversion.outputs.version}}
    - name: Set up Go
      # Conditional duplication sucks - GHA doesn't grok YAML anchors/aliases
      if: >-
        steps.check.outputs.buildamd == 'true' ||
        steps.check.outputs.buildarm == 'true' ||
        steps.actual_dryrun.outputs.dryrun == 'true'
      uses: actions/setup-go@v4
      with:
        go-version: '1.18'
    - name: Create Keychain
      if: >-
        steps.check.outputs.buildamd == 'true' ||
        steps.check.outputs.buildarm == 'true' ||
        steps.actual_dryrun.outputs.dryrun == 'true'
      run: |
        cat << EOF
        echo $APPLICATION_CERTIFICATE | base64 --decode -o appcert.p12
        echo $INSTALLER_CERTIFICATE | base64 --decode -o instcert.p12

        security create-keychain -p "$KEYCHAIN_PWD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PWD" build.keychain
        security import appcert.p12 -k build.keychain -P "$CERTIFICATE_PWD" -T /usr/bin/codesign
        security import instcert.p12 -k build.keychain -P "$CERTIFICATE_PWD" -T /usr/bin/productsign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PWD" build.keychain &> /dev/null
        xcrun notarytool store-credentials "notarytool-profile" --apple-id "$NOTARIZE_USERNAME" --team-id "$NOTARIZE_TEAM" --password "$NOTARIZE_PASSWORD" &> /dev/null
        EOF
    - name: Build and Sign ARM
      if: steps.check.outputs.buildarm == 'true' || steps.actual_dryrun.outputs.dryrun == 'true'
      run: |
        echo "foobar_arm64" > podman-installer-macos-arm64.pkg
        shasum -a 256 podman-installer-macos-arm64.pkg >> shasums
    - name: Build and Sign AMD
      if: steps.check.outputs.buildamd == 'true' || steps.actual_dryrun.outputs.dryrun == 'true'
      run: |
        echo "foobar_amd64" > podman-installer-macos-amd64.pkg
        shasum -a 256 podman-installer-macos-amd64.pkg >> shasums
    - name: Artifact
      if: >-
        steps.check.outputs.buildamd == 'true' ||
        steps.check.outputs.buildarm == 'true' ||
        steps.actual_dryrun.outputs.dryrun == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: installers
        path: |
          podman-installer-macos-*.pkg
    - name: Upload to Release
      if: >-
        steps.actual_dryrun.outputs.dryrun == 'false' &&
        (steps.check.outputs.buildamd == 'true' ||
         steps.check.outputs.buildarm == 'true')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        (gh release download ${{steps.getversion.outputs.version}} -p "shasums" || exit 0)
        gh release upload ${{steps.getversion.outputs.version}} podman-installer-macos-*.pkg
        gh release upload ${{steps.getversion.outputs.version}} --clobber shasums
