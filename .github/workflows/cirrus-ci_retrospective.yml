---

# Notice when cirrus-ci has completed executing based on a push to
# a Branch or Tag.  Prepare and automatically trigger the
# Cirrus-CI build's 'manual' tasks as specified below.

on:
    # Ref: https://help.github.com/en/actions/reference/events-that-trigger-workflows#check-suite-event-check_suite
    check_suite:  # Always/only triggered from the default branch (master)
        types:
            - completed

# Variables required by multiple jobs/steps
env:
    # Version number of cirrus-ci_retrospective container image to use (for reference)
    CCI_RET_TAG: 'v1.1.3'
    # Enable debugging of github actions itself
    # (see https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-a-debug-message)
    ACTIONS_STEP_DEBUG: '${{ secrets.ACTIONS_STEP_DEBUG }}'
    MANUAL_TASK_NAME: "retrospective"
    # Allow cevich to enable/disable failure notification
    FAILMAILGIST: 'https://gist.githubusercontent.com/cevich/1e479c6811dc5b44508c2ba4dc295ff1'

jobs:
    # Obtain task details and validate required execution conditions
    cirrus-ci_retrospective:
        # Do not execute for other github applications, only works with cirrus-ci
        if: github.event.check_suite.app.name == 'Cirrus CI'
        runs-on: ubuntu-latest
        steps:
            # Ref: https://github.com/containers/automation/tree/master/cirrus-ci_retrospective
            - name: Execute the cirrus-ci_retrospective container
              # Can't use ${{env.CCI_RET_TAG}} in 'uses` because dumb stupid
              uses: docker://quay.io/libpod/cirrus-ci_retrospective:v1.1.3
              env:
                GITHUB_TOKEN: ${{ github.token }}

            # Ref: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions
            - name: Load and process resulting JSON into output parameter values
              id: retro
              env:
                  # Produced by executing container image (above)
                  ccirjson: ./cirrus-ci_retrospective.json
              # Cirrus-CI Status (partial) Decoder Ring:
              #     COMPLETED == Successful
              #     ABORTED   == Task or dependency Failure
              #     PAUSED    == Awaiting manual trigger
              #     CANCELED  == Manually canceled task or dependency
              #     TRIGGERED == Pre-scheduling
              #     SCHEDULED == Queued to run
              #     CREATED   == Waiting for full Queue
              run: |
                  success_status=$(jq --raw-output '.[] | select(.name == "success") | .status' "$ccirjson")
                  retro_status=$(jq --raw-output '.[] | select(.name == "${{env.MANUAL_TASK_NAME}}") | .status' "$ccirjson")
                  retro_tid=$(jq --raw-output '.[] | select(.name == "${{env.MANUAL_TASK_NAME}}") | .id' "$ccirjson")

                  if [[ -n "$retro_tid" ]] &&
                     [[ "$retro_status" == "PAUSED" ]] && \
                     [[ -n "$success_status" ]] && (
                        [[ "$success_status" == "COMPLETED" ]] || \
                        [[ "$success_status" == "ABORTED" ]] )
                  then
                      echo "::set-output name=trigger::true"
                      echo "::set-output name=taskid::$retro_tid"
                  else
                      echo "::set-output name=trigger::false"
                      echo "::set-output name=taskid::0"
                  fi

                  printf "::set-output name=success_status::%s\n" "$success_status"
                  printf "::set-output name=retro_status::%s\n" "$retro_status"

            - if: steps.retro.outputs.trigger && steps.retro.outputs.taskid > 0
              name: Trigger Cirrus-CI ${{env.MANUAL_TASK_NAME}} task
              env:
                  # ID invented here to verify the operation
                  UUID: ${{github.run_id}}.${{github.run_number}}.${{github.sha}}
              run: |
                  set +x
                  trap "history -c" EXIT
                  curl --silent --request POST \
                    --url https://api.cirrus-ci.com/graphql \
                    --header "Authorization: Bearer ${{ secrets.CIRRUS_API_TOKEN }}" \
                    --header 'content-type: application/json' \
                    --data '{"query":"mutation {
                              trigger(input: {
                                taskId: \"${{steps.retro.outputs.taskid}}\",
                                clientMutationId: \"${{env.UUID}}\"}) {
                                  clientMutationId
                                  task {name}
                                }
                              }"
                            }' \
                    > ./task_trigger.json

                  actual=$(jq --raw-output '.data.trigger.clientMutationId' ./task_trigger.json)
                  test "$actual" == "$UUID"

            - if: failure()
              id: failmail
              run: printf "::set-output name=enabled::%s\n" $(curl --silent --location --url "$FAILMAILGIST/raw")

            - if: failure() && steps.failmail.outputs.enabled
              name: Let cevich know right away
              uses: dawidd6/action-send-mail@v2.2.0
              with:
                server_address: smtp.gmail.com
                server_port: 465
                username: ${{secrets.RETRO_MAIL_USERNAME}}
                password: ${{secrets.RETRO_MAIL_PASSWORD}}
                subject: cirrus-ci_retrospective failure on ${{github.repository}}
                to: cevich@redhat.com
                from: ${{secrets.RETRO_MAIL_USERNAME}}
                content_type: text/plain
                attachments: ./action_task_trigger.json
                body: |
                    Workflow ${{github.workflow}} failed: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}

                    Success Status: ${{steps.retro.outputs.success_status}}
                    Retro. Status: ${{steps.retro.outputs.retro_status}}
                    Retro Task ID: ${{steps.retro.outputs.retro_tid}}
                    Trigger: ${{steps.retro.outputs.trigger}}
                    Notice control: ${{env.FAILMAILGIST}}

    debug:
        if: github.event.check_suite.app.name == 'Cirrus CI'
        runs-on: ubuntu-latest
        steps:
            - name: Collect the originating event and result JSON
              run: cp "${{ github.event_path }}" ./

            - name: Log colorized and formatted event JSON
              run: jq --indent 4 --color-output . ./event.json

            # Do this in parallel for simplicity since it's just for debugging
            # purposes.  Assume it will execute the same/similar to the regular job
            # above.
            - if: always()
              name: Execute the cirrus-ci_retrospective container
              id: cirrus-ci_retrospective
              # Can't use ${{env.CCI_RET_TAG}} in 'uses` because dumb stupid
              uses: docker://quay.io/libpod/cirrus-ci_retrospective:v1.1.3
              env:
                GITHUB_TOKEN: ${{ github.token }}

            - if: always()
              name: Log colorized and formatted cirrus-ci_retrospective JSON
              run: jq --indent 4 --color-output . ./cirrus-ci_retrospective.json
