---

on:
    check_suite:
        types:
            - completed

env:
    ACTIONS_STEP_DEBUG: '${{ secrets.ACTIONS_STEP_DEBUG }}'

jobs:
    debug:
        if: github.event.check_suite.app.name == 'Cirrus CI'
        runs-on: ubuntu-latest
        steps:
            - name: Collect the originating event and result JSON
              run: cp "${{ github.event_path }}" ./

            - name: Log colorized and formatted event JSON
              run: jq --indent 4 --color-output . ./event.json

            - name: Execute latest upstream cirrus-ci_retrospective
              id: cirrus-ci_retrospective
              # Can't use ${{env.CCI_RET_TAG}} in 'uses` because dumb stupid
              uses: docker://quay.io/libpod/cirrus-ci_retrospective:v1.1.3
              env:
                GITHUB_TOKEN: ${{ github.token }}

            - if: always()
              name: Log colorized and formatted cirrus-ci_retrospective JSON
              run: jq --indent 4 --color-output . ./cirrus-ci_retrospective.json
    shell:
        if: github.event.check_suite.app.name == 'Cirrus CI'
        runs-on: ubuntu-latest
        steps:
            - run: |
                set -x

                jq --exit-status 'has("check_suite")' < "$GITHUB_EVENT_PATH"

                _act_typ=$(jq --compact-output --raw-output '.action' < "$GITHUB_EVENT_PATH")
                [[ "$_act_typ" == "completed" ]]

                _filt='.check_suite.app.id'
                cirrus_app_id=$(jq --compact-output --raw-output "$_filt" < "$GITHUB_EVENT_PATH")
                [[ "$cirrus_app_id" == "3232" ]]

                _filt='.repository.node_id'
                repo_node_id=$(jq --compact-output --raw-output "$_filt" < "$GITHUB_EVENT_PATH")
                _filt='.check_suite.app.head_sha'
                head_sha=$(jq --compact-output --raw-output "$_filt" < "$GITHUB_EVENT_PATH")

                # Obtain all check_runs and their important details
                curl --request POST \
                  --silent \
                  --url https://api.github.com/graphql \
                  --header 'accept: application/vnd.github.antiope-preview+json' \
                  --header 'authorization: Bearer ${{ github.token }}' \
                  --header 'content-type: application/json' \
                  --data '
                  {"query":"query ($repo_node_id: ID!, $head_sha: GitObjectID!) {
                      node(id: $repo_node_id) {
                          ... on Repository {
                              object(oid: $head_sha) {
                                  ... on Commit {
                                      checkSuites(first: 1, filterBy: {appId: 3232}) {
                                          nodes {
                                              checkRuns(last: 100) {
                                                  nodes {
                                                      name
                                                      externalId
                                                      conclusion
                                                      status
                                                      summary
                                                      id
                                                      startedAt
                                                      completedAt
                                                  }
                                              }
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }",
                  "variables":{"repo_node_id":"'$repo_node_id'","head_sha":"'$head_sha'"}}' \
                                      | tee ./all_check_runs.json | jq --indent 4 --color-output .

                  jq --indent 4 --color-output . ./all_check_runs.json
