---

on:
    check_suite:
        types:
            - completed

env:
    ACTIONS_STEP_DEBUG: '${{ secrets.ACTIONS_STEP_DEBUG }}'

jobs:
    debug:
        if: github.event.check_suite.app.name == 'Cirrus CI'
        runs-on: ubuntu-latest
        steps:
            - name: Collect the originating event and result JSON
              run: cp "${{ github.event_path }}" ./

            - name: Log colorized and formatted event JSON
              run: jq --indent 4 --color-output . ./event.json

            - name: Execute latest upstream cirrus-ci_retrospective
              id: cirrus-ci_retrospective
              # Can't use ${{env.CCI_RET_TAG}} in 'uses` because dumb stupid
              uses: docker://quay.io/libpod/cirrus-ci_retrospective:v1.1.3
              env:
                GITHUB_TOKEN: ${{ github.token }}

            - if: always()
              name: Log colorized and formatted cirrus-ci_retrospective JSON
              run: jq --indent 4 --color-output . ./cirrus-ci_retrospective.json
    shell:
        if: github.event.check_suite.app.name == 'Cirrus CI'
        runs-on: ubuntu-latest
        steps:
            - run: |
                set -e
                [[ $(jq --exit-status 'has("check_suite")' < "$GITHUB_EVENT_PATH") == "true" ]]

                _act_typ=$(jq --compact-output --raw-output '.action' < "$GITHUB_EVENT_PATH")
                [[ "$_act_typ" == "completed" ]]

                _filt='.check_suite.app.id'
                cirrus_app_id=$(jq --compact-output --raw-output "$_filt" < "$GITHUB_EVENT_PATH")
                [[ "$cirrus_app_id" == "3232" ]]

                _filt='.repository.node_id'
                repo_node_id=$(jq --compact-output --raw-output "$_filt" < "$GITHUB_EVENT_PATH")
                _filt='.check_suite.head_sha'
                head_sha=$(jq --compact-output --raw-output "$_filt" < "$GITHUB_EVENT_PATH")

                [[ -n "$repo_node_id" ]] && [[ -n "$head_sha" ]] && \
                [[ "$repo_node_id" != "null" ]] && [[ "$head_sha" != "null" ]]

                Q=$(curl --location --url 'https://gist.github.com/cevich/165f6477745cc2e9ec048f169155fd83/raw/check_runs_by_sha.graphql')
                V=$(curl --location --url 'https://gist.github.com/cevich/165f6477745cc2e9ec048f169155fd83/raw/variables.json' | \
                    sed -r -e "s/@@repo_node_id@@/$repo_node_id/g" | \
                    sed -r -e "s/@@head_sha@@/$head_sha/g")

                BASE_URL='https://gist.github.com/cevich/165f6477745cc2e9ec048f169155fd83/raw'
                # Encode query into file to avoid shell interaction and quoting complexity
                echo -n '{"query":"' > ./data
                # Obtain actual query and varibles from gists, so they can be easily modified/updated
                curl --location --url "$BASE_URL/check_runs_by_sha.graphql" >> ./data
                echo -n '", "variables": "' >> ./data
                curl --location --url "$BASE_URL/variables.json" | \
                    sed -r -e "s/@@repo_node_id@@/$repo_node_id/g" | \
                    sed -r -e "s/@@head_sha@@/$head_sha/g" >> ./data
                echo '"}' >> ./data

                # Obtain all check_runs and their important details
                curl --request POST \
                  --silent \
                  --url https://api.github.com/graphql \
                  --header 'accept: application/vnd.github.antiope-preview+json' \
                  --header 'authorization: Bearer ${{ github.token }}' \
                  --header 'content-type: application/json' \
                  --data @./data

                  jq --indent 4 --color-output . < ./curl_output
            - if: always()
              uses: actions/upload-artifact@v1
              with:
                name: GithubQuery
                path: data
            - if: always()
              uses: actions/upload-artifact@v1
              with:
                name: GithubResult
                path: curl_output
